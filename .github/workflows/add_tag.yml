name: add_tag

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  add_tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Extract version and add tag (if draft or pre-release)
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // 最新のマージメッセージを取得してバージョン抽出
            const mergeCommit = execSync('git log --merges -1 --pretty=format:"%s"').toString().trim();
            console.log(`Merge commit message: ${mergeCommit}`);

            const versionMatch = mergeCommit.match(/Merge pull request .* from .*release\/ver(.*)/);
            if (!versionMatch) {
                throw new Error('No version extracted.');
            }

            const version = versionMatch[1];
            const tagName = `ver${version}`;
            console.log(`version: ${version}`);

            // リリース情報を取得
            try {
                const release = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: tagName
                });

                const isDraftOrPre = release.data.draft || release.data.prerelease;
                console.log(`Found release for ${tagName} (draft: ${release.data.draft}, prerelease: ${release.data.prerelease})`);

                if (isDraftOrPre) {
                console.log(`Tag ${tagName} has a draft or prerelease. Forcing update.`);
                execSync(`git tag -f ${tagName} ${process.env.GITHUB_SHA}`);
                execSync(`git push origin -f ${tagName}`);
                } else {
                console.log(`Tag ${tagName} has a published release. Skipping overwrite.`);
                }
            } catch (error) {
                if (error.status === 404) {
                console.log(`No release found for tag ${tagName}, creating new tag.`);
                execSync(`git tag ${tagName} ${process.env.GITHUB_SHA}`);
                execSync(`git push origin ${tagName}`);
                } else {
                throw error;
                }
            }